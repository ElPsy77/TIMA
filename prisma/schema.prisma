
// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  TEACHER
  USER
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  rollNo        String?   @default("")
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole? @default(USER)
  accounts      Account[]
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Teacher {
  id    String @id @default(cuid()) @map("_id")
  email String @unique
}

model Course {
  id String @id @default(cuid()) @map("_id")
  userId String
  title String 
  description String? 
  imageUrl String? 
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  
  attachments Attachment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id String @id @default(cuid()) @map("_id")
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(cuid()) @map("_id")
  name String
  url String 

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}